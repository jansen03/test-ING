{"version":3,"file":"SearchList.js","sourceRoot":"","sources":["../../src/views/SearchList/SearchList.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEF,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;GAMG;AAEH,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAUE;;WAEG;QAEH,SAAI,GAAG,QAAQ,CAAC;QAEhB;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;IAwBZ,CAAC;IAtBU,MAAM;QACb,OAAO,IAAI,CAAA;aACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;wBACb,IAAI,CAAC,QAAQ;wBACb,IAAI,CAAC,KAAK;;;MAG5B,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;CACF,CAAA;AA3CiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;IAO1B,CAAA;AAMF;IADC,QAAQ,EAAE;uCACK;AAMhB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;wCACf;AApBC,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA4CrB;SA5CY,SAAS","sourcesContent":["/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\n\r\n import {LitElement, html, css} from 'lit';\r\n import {customElement, property} from 'lit/decorators.js';\r\n \r\n /**\r\n  * An example element.\r\n  *\r\n  * @fires count-changed - Indicates when the count changes\r\n  * @slot - This element has a slot\r\n  * @csspart button - The button\r\n  */\r\n @customElement('my-element')\r\n export class MyElement extends LitElement {\r\n   static override styles = css`\r\n     :host {\r\n       display: block;\r\n       border: solid 1px gray;\r\n       padding: 16px;\r\n       max-width: 800px;\r\n     }\r\n   `;\r\n \r\n   /**\r\n    * The name to say \"Hello\" to.\r\n    */\r\n   @property()\r\n   name = 'Jansen';\r\n \r\n   /**\r\n    * The number of times the button has been clicked.\r\n    */\r\n   @property({type: Number})\r\n   count = 0;\r\n \r\n   override render() {\r\n     return html`\r\n       <h1>${this.sayHello(this.name)}!</h1>\r\n       <button @click=${this._onClick} part=\"button\">\r\n         Click Count: ${this.count}\r\n       </button>\r\n       <slot></slot>\r\n     `;\r\n   }\r\n \r\n   private _onClick() {\r\n     this.count++;\r\n     this.dispatchEvent(new CustomEvent('count-changed'));\r\n   }\r\n \r\n   /**\r\n    * Formats a greeting\r\n    * @param name The name to say \"Hello\" to\r\n    */\r\n   sayHello(name: string): string {\r\n     return `Hello, ${name}`;\r\n   }\r\n }\r\n \r\n declare global {\r\n   interface HTMLElementTagNameMap {\r\n     'my-element': MyElement;\r\n   }\r\n }\r\n "]}